import gradio as gr
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split

# Load and preprocess data
df1 = pd.read_csv('/content/Bank_churn_Dataset1_cleaned.csv')
df2 = pd.read_csv('/content/Bank_churn_Dataset2_cleaned.csv')

# Combine both datasets
combined_df = pd.concat([df1, df2], ignore_index=True)

# Encode categorical variables
label_encoder = LabelEncoder()
combined_df['gender'] = label_encoder.fit_transform(combined_df['gender'])

# Scale numerical features
scaler = StandardScaler()
combined_df[['age', 'tenure', 'numofproducts', 'estimatedsalary']] = scaler.fit_transform(
    combined_df[['age', 'tenure', 'numofproducts', 'estimatedsalary']]
)

# Prepare features and target
X = combined_df[['age', 'gender', 'tenure', 'numofproducts', 'estimatedsalary']]
y = combined_df['churn']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Logistic Regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Define prediction function
def predict_churn(age, gender, tenure, numofproducts, estimatedsalary):
    # Preprocess input
    gender_encoded = label_encoder.transform([gender])[0]
    input_data = pd.DataFrame([[age, gender_encoded, tenure, numofproducts, estimatedsalary]],
                               columns=['age', 'gender', 'tenure', 'numofproducts', 'estimatedsalary'])
    input_data[['age', 'tenure', 'numofproducts', 'estimatedsalary']] = scaler.transform(input_data[['age', 'tenure', 'numofproducts', 'estimatedsalary']])
    
    # Make prediction
    prediction = model.predict(input_data)
    return "Churn" if prediction[0] == 1 else "No Churn"

# Create Gradio interface
inputs = [
    gr.Slider(minimum=18, maximum=100, label="Age"),
    gr.Radio(choices=["Male", "Female"], label="Gender"),
    gr.Slider(minimum=0, maximum=12, label="Tenure (in months)"),
    gr.Slider(minimum=1, maximum=5, label="Number of Products"),
    gr.Number(label="Estimated Salary")
]

outputs = gr.Textbox(label="Prediction")

gr.Interface(fn=predict_churn, inputs=inputs, outputs=outputs, title="Churn Prediction Model",
             description="Enter customer details to predict if they will churn.").launch()
